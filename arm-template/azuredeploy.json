{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "dockerEEURL": {
      "type": "securestring"
    },
    "instances": {
      "type": "object",
      "defaultValue": {
        "managers": 3,
        "dtr": 3,
        "workers": {
          "linux": 2,
          "windows": 2
        }
      }
    },
    "scripts": {
      "type": "object",
      "defaultValue": {
        "installDockerEE": "https://raw.githubusercontent.com/stevenfollis/ee-workshop/master/arm-template/install-docker-ee.sh",
        "installUCP": "https://raw.githubusercontent.com/stevenfollis/ee-workshop/master/arm-template/install-ucp.sh",
        "installDTR": "https://raw.githubusercontent.com/stevenfollis/ee-workshop/master/arm-template/install-dtr.sh",
        "installUCPPowershell": "https://raw.githubusercontent.com/stevenfollis/ee-workshop/master/arm-template/install-ucp.ps1"
      }
    },
    "credentials": {
      "type": "object",
      "defaultValue": {
        "adminUsername": "eeadmin",
        "adminPassword": "DockerEE123!"
      }
    },
    "versions": {
      "type": "object",
      "defaultValue": {
        "engine": {
          "linux": "stable-17.06",
          "windows": "17.06.2-ee-10"
        },
        "ucp": "latest",
        "dtr": "latest"
      }
    }
  },
  "variables": {
    "labName": "[resourceGroup().name]",
    "shared": {
      "storage": {
        "name": "[concat('sa', uniqueString(resourceGroup().id))]",
        "type": "Standard_LRS",
        "vhdContainerName": "vhd"
      },
      "networking": {
        "name": "vnet",
        "addressPrefixes": [
          "10.0.0.0/16"
        ],
        "subnets": [{
          "name": "nodes",
          "properties": {
            "addressPrefix": "10.0.64.0/24"
          }
        }, {
          "name": "pods",
          "properties": {
            "addressPrefix": "10.0.0.0/18"
          }
        }]
      }
    },
    "managers": {
      "instances": "[parameters('instances').managers]",
      "avSet": "managers",
      "subnet": {
        "nodes": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('shared').networking.name, 'nodes')]",
        "pods": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('shared').networking.name, 'pods')]"
      },
      "vmSize": "Standard_DS3_v2",
      "imageReference": {
        "publisher": "Canonical",
        "offer": "UbuntuServer",
        "sku": "16.04-LTS",
        "version": "latest"
      }
    },
    "dtr": {
      "instances": "[parameters('instances').dtr]",
      "avSet": "dtr",
      "subnet": {
        "nodes": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('shared').networking.name, 'nodes')]",
        "pods": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('shared').networking.name, 'pods')]"
      },
      "vmSize": "Standard_DS2_v2",
      "imageReference": {
        "publisher": "Canonical",
        "offer": "UbuntuServer",
        "sku": "16.04-LTS",
        "version": "latest"
      }
    },
    "workers-linux": {
      "instances": "[parameters('instances').workers.linux]",
      "avSet": "workers-linux",
      "subnet": {
        "nodes": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('shared').networking.name, 'nodes')]",
        "pods": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('shared').networking.name, 'pods')]"
      },
      "vmSize": "Standard_DS2_v2",
      "imageReference": {
        "publisher": "Canonical",
        "offer": "UbuntuServer",
        "sku": "16.04-LTS",
        "version": "latest"
      }
    },
    "workers-windows": {
      "instances": "[parameters('instances').workers.windows]",
      "avSet": "workers-windows",
      "subnet": {
        "nodes": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('shared').networking.name, 'nodes')]",
        "pods": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('shared').networking.name, 'pods')]"
      },
      "vmSize": "Standard_E2S_v3",
      "imageReference": {
        "publisher": "MicrosoftWindowsServer",
        "offer": "WindowsServer",
        "sku": "2016-Datacenter-with-Containers",
        "version": "latest"
      }
    },
    "api": {
      "availabilitySets": "2015-06-15",
      "loadBalancers": "2015-06-15",
      "networkInterfaces": "2015-06-15",
      "publicIPAddresses": "2015-06-15",
      "storageAccounts": "2015-06-15",
      "virtualMachines": "2015-06-15",
      "virtualNetwork": "2015-06-15"
    }
  },
  "resources": [{
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[toLower(variables('shared').storage.name)]",
      "apiVersion": "[variables('api').storageAccounts]",
      "location": "[resourceGroup().location]",
      "tags": {
        "displayName": "StorageAccount"
      },
      "properties": {
        "accountType": "[variables('shared').storage.type]"
      }
    },
    {
      "apiVersion": "[variables('api').virtualNetwork]",
      "type": "Microsoft.Network/virtualNetworks",
      "name": "vnet",
      "location": "[resourceGroup().location]",
      "tags": {
        "displayName": "Virtual Network"
      },
      "properties": {
        "addressSpace": {
          "addressPrefixes": "[variables('shared').networking.addressPrefixes]"
        },
        "subnets": "[variables('shared').networking.subnets]"
      }
    },
    {
      "type": "Microsoft.Compute/availabilitySets",
      "name": "[variables('managers').avSet]",
      "apiVersion": "[variables('api').availabilitySets]",
      "location": "[resourceGroup().location]",
      "tags": {
        "displayName": "Availability Set - Managers"
      },
      "properties": {
        "platformFaultDomainCount": 2,
        "platformUpdateDomainCount": 5
      }
    },
    {
      "type": "Microsoft.Compute/availabilitySets",
      "name": "[variables('dtr').avSet]",
      "apiVersion": "[variables('api').availabilitySets]",
      "location": "[resourceGroup().location]",
      "tags": {
        "displayName": "Availability Set - DTR"
      },
      "properties": {
        "platformFaultDomainCount": 2,
        "platformUpdateDomainCount": 5
      }
    },
    {
      "type": "Microsoft.Compute/availabilitySets",
      "name": "[variables('workers-linux').avSet]",
      "apiVersion": "[variables('api').availabilitySets]",
      "location": "[resourceGroup().location]",
      "tags": {
        "displayName": "Availability Set - Workers (Linux)"
      },
      "properties": {
        "platformFaultDomainCount": 2,
        "platformUpdateDomainCount": 5
      }
    },
    {
      "type": "Microsoft.Compute/availabilitySets",
      "name": "[variables('workers-windows').avSet]",
      "apiVersion": "[variables('api').availabilitySets]",
      "location": "[resourceGroup().location]",
      "tags": {
        "displayName": "Availability Set - Workers (Windows)"
      },
      "properties": {
        "platformFaultDomainCount": 2,
        "platformUpdateDomainCount": 5
      }
    },
    {
      "apiVersion": "[variables('api').publicIPAddresses]",
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "ucp",
      "location": "[resourceGroup().location]",
      "tags": {
        "displayName": "PIP - UCP"
      },
      "properties": {
        "publicIPAllocationMethod": "Dynamic",
        "dnsSettings": {
          "domainNameLabel": "[concat('ucp-', variables('labName'))]"
        }
      }
    },
    {
      "apiVersion": "[variables('api').publicIPAddresses]",
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[concat('manager-', padLeft(copyIndex(1), 2, '0'))]",
      "location": "[resourceGroup().location]",
      "tags": {
        "displayName": "PIP - Managers"
      },
      "copy": {
        "name": "PIPCopy",
        "count": "[variables('managers').instances]"
      },
      "properties": {
        "publicIPAllocationMethod": "Dynamic",
        "dnsSettings": {
          "domainNameLabel": "[concat(variables('labName'), '-manager', padLeft(copyIndex(1), 2, '0'))]"
        }
      }
    },
    {
      "apiVersion": "[variables('api').publicIPAddresses]",
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "dtr",
      "location": "[resourceGroup().location]",
      "tags": {
        "displayName": "PIP - DTR"
      },
      "properties": {
        "publicIPAllocationMethod": "Dynamic",
        "dnsSettings": {
          "domainNameLabel": "[concat('dtr-', variables('labName'))]"
        }
      }
    },
    {
      "apiVersion": "[variables('api').publicIPAddresses]",
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[concat('dtr-', padLeft(copyIndex(1), 2, '0'))]",
      "location": "[resourceGroup().location]",
      "tags": {
        "displayName": "PIP - DTR Workers"
      },
      "copy": {
        "name": "PIPCopy",
        "count": "[variables('dtr').instances]"
      },
      "properties": {
        "publicIPAllocationMethod": "Dynamic",
        "dnsSettings": {
          "domainNameLabel": "[concat(variables('labName'), '-dtr', padLeft(copyIndex(1), 2, '0'))]"
        }
      }
    },
    {
      "apiVersion": "[variables('api').publicIPAddresses]",
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "apps",
      "location": "[resourceGroup().location]",
      "tags": {
        "displayName": "PIP - Apps"
      },
      "properties": {
        "publicIPAllocationMethod": "Dynamic",
        "dnsSettings": {
          "domainNameLabel": "[concat('apps-', variables('labName'))]"
        }
      }
    },
    {
      "apiVersion": "[variables('api').publicIPAddresses]",
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[concat('worker-linux-', padLeft(copyIndex(1), 2, '0'))]",
      "location": "[resourceGroup().location]",
      "tags": {
        "displayName": "PIP - Linux Workers"
      },
      "copy": {
        "name": "PIPCopy",
        "count": "[variables('workers-linux').instances]"
      },
      "properties": {
        "publicIPAllocationMethod": "Dynamic",
        "dnsSettings": {
          "domainNameLabel": "[concat(variables('labName'), '-worker-linux-', padLeft(copyIndex(1), 2, '0'))]"
        }
      }
    },
    {
      "apiVersion": "[variables('api').publicIPAddresses]",
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[concat('worker-win-', padLeft(copyIndex(1), 2, '0'))]",
      "location": "[resourceGroup().location]",
      "tags": {
        "displayName": "PIP - Windows Workers"
      },
      "copy": {
        "name": "PIPCopy",
        "count": "[variables('workers-windows').instances]"
      },
      "properties": {
        "publicIPAllocationMethod": "Dynamic",
        "dnsSettings": {
          "domainNameLabel": "[concat(variables('labName'), '-worker-win-', padLeft(copyIndex(1), 2, '0'))]"
        }
      }
    },
    {
      "type": "Microsoft.Network/loadBalancers",
      "name": "ucp",
      "apiVersion": "[variables('api').loadBalancers]",
      "location": "[resourceGroup().location]",
      "tags": {
        "displayName": "LB - UCP"
      },
      "properties": {
        "frontendIPConfigurations": [{
          "name": "LoadBalancerFrontEnd",
          "properties": {
            "privateIPAllocationMethod": "Dynamic",
            "publicIPAddress": {
              "id": "[resourceId('Microsoft.Network/publicIPAddresses', 'ucp')]"
            }
          }
        }],
        "backendAddressPools": [{
          "name": "LoadBalancerBackEnd"
        }],
        "loadBalancingRules": [{
            "name": "tcp80",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIpConfigurations', 'ucp', 'LoadBalancerFrontEnd')]"
              },
              "frontendPort": 80,
              "backendPort": 80,
              "enableFloatingIP": false,
              "idleTimeoutInMinutes": 4,
              "protocol": "Tcp",
              "loadDistribution": "Default",
              "backendAddressPool": {
                "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', 'ucp', 'LoadBalancerBackEnd')]"
              },
              "probe": {
                "id": "[resourceId('Microsoft.Network/loadBalancers/probes', 'ucp', 'tcp80')]"
              }
            }
          },
          {
            "name": "tcp443",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIpConfigurations', 'ucp', 'LoadBalancerFrontEnd')]"
              },
              "frontendPort": 443,
              "backendPort": 443,
              "enableFloatingIP": false,
              "idleTimeoutInMinutes": 4,
              "protocol": "Tcp",
              "loadDistribution": "Default",
              "backendAddressPool": {
                "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', 'ucp', 'LoadBalancerBackEnd')]"
              },
              "probe": {
                "id": "[resourceId('Microsoft.Network/loadBalancers/probes', 'ucp', 'tcp443')]"
              }
            }
          },
          {
            "name": "tcp6443",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIpConfigurations', 'ucp', 'LoadBalancerFrontEnd')]"
              },
              "frontendPort": 6443,
              "backendPort": 6443,
              "enableFloatingIP": false,
              "idleTimeoutInMinutes": 4,
              "protocol": "Tcp",
              "loadDistribution": "Default",
              "backendAddressPool": {
                "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', 'ucp', 'LoadBalancerBackEnd')]"
              },
              "probe": {
                "id": "[resourceId('Microsoft.Network/loadBalancers/probes', 'ucp', 'tcp6443')]"
              }
            }
          }
        ],
        "probes": [{
            "name": "tcp80",
            "properties": {
              "protocol": "Tcp",
              "port": 80,
              "intervalInSeconds": 5,
              "numberOfProbes": 2
            }
          },
          {
            "name": "tcp443",
            "properties": {
              "protocol": "Tcp",
              "port": 443,
              "intervalInSeconds": 5,
              "numberOfProbes": 2
            }
          },
          {
            "name": "tcp6443",
            "properties": {
              "protocol": "Tcp",
              "port": 6443,
              "intervalInSeconds": 5,
              "numberOfProbes": 2
            }
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/publicIPAddresses', 'ucp')]"
      ]
    },
    {
      "type": "Microsoft.Network/loadBalancers",
      "name": "dtr",
      "apiVersion": "[variables('api').loadBalancers]",
      "location": "[resourceGroup().location]",
      "tags": {
        "displayName": "LB - DTR"
      },
      "properties": {
        "frontendIPConfigurations": [{
          "name": "LoadBalancerFrontEnd",
          "properties": {
            "privateIPAllocationMethod": "Dynamic",
            "publicIPAddress": {
              "id": "[resourceId('Microsoft.Network/publicIPAddresses', 'dtr')]"
            }
          }
        }],
        "backendAddressPools": [{
          "name": "LoadBalancerBackEnd"
        }],
        "loadBalancingRules": [{
            "name": "tcp80",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIpConfigurations', 'dtr', 'LoadBalancerFrontEnd')]"
              },
              "frontendPort": 80,
              "backendPort": 80,
              "enableFloatingIP": false,
              "idleTimeoutInMinutes": 4,
              "protocol": "Tcp",
              "loadDistribution": "Default",
              "backendAddressPool": {
                "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', 'dtr', 'LoadBalancerBackEnd')]"
              },
              "probe": {
                "id": "[resourceId('Microsoft.Network/loadBalancers/probes', 'dtr', 'tcp80')]"
              }
            }
          },
          {
            "name": "tcp443",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIpConfigurations', 'dtr', 'LoadBalancerFrontEnd')]"
              },
              "frontendPort": 443,
              "backendPort": 443,
              "enableFloatingIP": false,
              "idleTimeoutInMinutes": 4,
              "protocol": "Tcp",
              "loadDistribution": "Default",
              "backendAddressPool": {
                "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', 'dtr', 'LoadBalancerBackEnd')]"
              },
              "probe": {
                "id": "[resourceId('Microsoft.Network/loadBalancers/probes', 'dtr', 'tcp443')]"
              }
            }
          }
        ],
        "probes": [{
            "name": "tcp80",
            "properties": {
              "protocol": "Tcp",
              "port": 80,
              "intervalInSeconds": 5,
              "numberOfProbes": 2
            }
          },
          {
            "name": "tcp443",
            "properties": {
              "protocol": "Tcp",
              "port": 443,
              "intervalInSeconds": 5,
              "numberOfProbes": 2
            }
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/publicIPAddresses', 'dtr')]"
      ]
    },
    {
      "type": "Microsoft.Network/loadBalancers",
      "name": "apps",
      "apiVersion": "[variables('api').loadBalancers]",
      "location": "[resourceGroup().location]",
      "tags": {
        "displayName": "LB - Apps"
      },
      "properties": {
        "frontendIPConfigurations": [{
          "name": "LoadBalancerFrontEnd",
          "properties": {
            "privateIPAllocationMethod": "Dynamic",
            "publicIPAddress": {
              "id": "[resourceId('Microsoft.Network/publicIPAddresses', 'apps')]"
            }
          }
        }],
        "backendAddressPools": [{
          "name": "LoadBalancerBackEnd"
        }],
        "loadBalancingRules": [{
            "name": "tcp80",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIpConfigurations', 'apps', 'LoadBalancerFrontEnd')]"
              },
              "frontendPort": 80,
              "backendPort": 80,
              "enableFloatingIP": false,
              "idleTimeoutInMinutes": 4,
              "protocol": "Tcp",
              "loadDistribution": "Default",
              "backendAddressPool": {
                "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', 'apps', 'LoadBalancerBackEnd')]"
              },
              "probe": {
                "id": "[resourceId('Microsoft.Network/loadBalancers/probes', 'apps', 'tcp80')]"
              }
            }
          },
          {
            "name": "tcp443",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIpConfigurations', 'apps', 'LoadBalancerFrontEnd')]"
              },
              "frontendPort": 443,
              "backendPort": 443,
              "enableFloatingIP": false,
              "idleTimeoutInMinutes": 4,
              "protocol": "Tcp",
              "loadDistribution": "Default",
              "backendAddressPool": {
                "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', 'apps', 'LoadBalancerBackEnd')]"
              },
              "probe": {
                "id": "[resourceId('Microsoft.Network/loadBalancers/probes', 'apps', 'tcp443')]"
              }
            }
          },
          {
            "name": "tcp8080",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIpConfigurations', 'apps', 'LoadBalancerFrontEnd')]"
              },
              "frontendPort": 8080,
              "backendPort": 8080,
              "enableFloatingIP": false,
              "idleTimeoutInMinutes": 4,
              "protocol": "Tcp",
              "loadDistribution": "Default",
              "backendAddressPool": {
                "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', 'apps', 'LoadBalancerBackEnd')]"
              },
              "probe": {
                "id": "[resourceId('Microsoft.Network/loadBalancers/probes', 'apps', 'tcp8080')]"
              }
            }
          }
        ],
        "probes": [{
            "name": "tcp80",
            "properties": {
              "protocol": "Tcp",
              "port": 80,
              "intervalInSeconds": 5,
              "numberOfProbes": 2
            }
          },
          {
            "name": "tcp443",
            "properties": {
              "protocol": "Tcp",
              "port": 443,
              "intervalInSeconds": 5,
              "numberOfProbes": 2
            }
          },
          {
            "name": "tcp8080",
            "properties": {
              "protocol": "Tcp",
              "port": 8080,
              "intervalInSeconds": 5,
              "numberOfProbes": 2
            }
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/publicIPAddresses', 'apps')]"
      ]
    },
    {
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[concat('manager-', padLeft(copyIndex(1), 2, '0'))]",
      "apiVersion": "[variables('api').networkInterfaces]",
      "location": "[resourceGroup().location]",
      "tags": {
        "displayName": "NIC - Managers"
      },
      "copy": {
        "name": "NICCopy",
        "count": "[variables('managers').instances]"
      },
      "properties": {
        "ipConfigurations": [{
          "name": "ipconfig",
          "primary": true,
          "properties": {
            "publicIPAddress": {
              "id": "[resourceId('Microsoft.Network/publicIPAddresses', concat('manager-', padLeft(copyIndex(1), 2, '0')))]"
            },
            "subnet": {
              "id": "[variables('managers').subnet.nodes]"
            },
            "loadBalancerBackendAddressPools": [{
              "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', 'ucp', 'LoadBalancerBackEnd')]"
            }]
          }
        }]
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks', 'vnet')]",
        "[resourceId('Microsoft.Network/publicIPAddresses', concat('manager-', padLeft(copyIndex(1), 2, '0')))]",
        "[resourceId('Microsoft.Network/loadBalancers', 'ucp')]"
      ]
    },
    {
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[concat('manager-', padLeft(copyIndex(1), 2, '0'), '-pods')]",
      "apiVersion": "[variables('api').networkInterfaces]",
      "location": "[resourceGroup().location]",
      "tags": {
        "displayName": "NIC - Managers"
      },
      "copy": {
        "name": "NICCopy",
        "count": "[variables('managers').instances]"
      },
      "properties": {
        "copy": [{
          "name": "ipConfigurations",
          "count": 128,
          "input": {
            "name": "[concat('ipconfig', copyIndex('ipConfigurations'))]",
            "properties": {
              "primary": "[equals(copyIndex('ipConfigurations'), 0)]",
              "subnet": {
                "id": "[variables('managers').subnet.pods]"
              }
            }
          }
        }]
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks', 'vnet')]",
        "[resourceId('Microsoft.Network/publicIPAddresses', concat('manager-', padLeft(copyIndex(1), 2, '0')))]",
        "[resourceId('Microsoft.Network/loadBalancers', 'ucp')]"
      ]
    },
    {
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[concat('dtr-', padLeft(copyIndex(1), 2, '0'))]",
      "apiVersion": "[variables('api').networkInterfaces]",
      "location": "[resourceGroup().location]",
      "tags": {
        "displayName": "NIC - DTR"
      },
      "copy": {
        "name": "NICCopy",
        "count": "[variables('dtr').instances]"
      },
      "properties": {
        "ipConfigurations": [{
          "name": "ipconfig",
          "primary": true,
          "properties": {
            "publicIPAddress": {
              "id": "[resourceId('Microsoft.Network/publicIPAddresses', concat('dtr-', padLeft(copyIndex(1), 2, '0')))]"
            },
            "subnet": {
              "id": "[variables('dtr').subnet.nodes]"
            },
            "loadBalancerBackendAddressPools": [{
              "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', 'dtr', 'LoadBalancerBackEnd')]"
            }]
          }
        }]
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks', 'vnet')]",
        "[resourceId('Microsoft.Network/publicIPAddresses', concat('dtr-', padLeft(copyIndex(1), 2, '0')))]",
        "[resourceId('Microsoft.Network/loadBalancers', 'dtr')]"
      ]
    },
    {
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[concat('dtr-', padLeft(copyIndex(1), 2, '0'), '-pods')]",
      "apiVersion": "[variables('api').networkInterfaces]",
      "location": "[resourceGroup().location]",
      "tags": {
        "displayName": "NIC - DTRs"
      },
      "copy": {
        "name": "NICCopy",
        "count": "[variables('dtr').instances]"
      },
      "properties": {
        "copy": [{
          "name": "ipConfigurations",
          "count": 128,
          "input": {
            "name": "[concat('ipconfig', copyIndex('ipConfigurations'))]",
            "properties": {
              "primary": "[equals(copyIndex('ipConfigurations'), 0)]",
              "subnet": {
                "id": "[variables('dtr').subnet.pods]"
              }
            }
          }
        }]
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks', 'vnet')]",
        "[resourceId('Microsoft.Network/publicIPAddresses', concat('dtr-', padLeft(copyIndex(1), 2, '0')))]",
        "[resourceId('Microsoft.Network/loadBalancers', 'dtr')]"
      ]
    },
    {
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[concat('worker-linux-', padLeft(copyIndex(1), 2, '0'))]",
      "apiVersion": "[variables('api').networkInterfaces]",
      "location": "[resourceGroup().location]",
      "tags": {
        "displayName": "NIC - Workers Linux"
      },
      "copy": {
        "name": "NICCopy",
        "count": "[variables('workers-linux').instances]"
      },
      "properties": {
        "ipConfigurations": [{
          "name": "ipconfig",
          "primary": true,
          "properties": {
            "publicIPAddress": {
              "id": "[resourceId('Microsoft.Network/publicIPAddresses', concat('worker-linux-', padLeft(copyIndex(1), 2, '0')))]"
            },
            "subnet": {
              "id": "[variables('workers-linux').subnet.nodes]"
            },
            "loadBalancerBackendAddressPools": [{
              "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', 'apps', 'LoadBalancerBackEnd')]"
            }]
          }
        }]
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks', 'vnet')]",
        "[resourceId('Microsoft.Network/publicIPAddresses', concat('worker-linux-', padLeft(copyIndex(1), 2, '0')))]",
        "[resourceId('Microsoft.Network/loadBalancers', 'apps')]"
      ]
    },
    {
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[concat('worker-linux-', padLeft(copyIndex(1), 2, '0'), '-pods')]",
      "apiVersion": "[variables('api').networkInterfaces]",
      "location": "[resourceGroup().location]",
      "tags": {
        "displayName": "NIC - Linux Workers"
      },
      "copy": {
        "name": "NICCopy",
        "count": "[variables('workers-linux').instances]"
      },
      "properties": {
        "copy": [{
          "name": "ipConfigurations",
          "count": 128,
          "input": {
            "name": "[concat('ipconfig', copyIndex('ipConfigurations'))]",
            "properties": {
              "primary": "[equals(copyIndex('ipConfigurations'), 0)]",
              "subnet": {
                "id": "[variables('workers-linux').subnet.pods]"
              }
            }
          }
        }]
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks', 'vnet')]",
        "[resourceId('Microsoft.Network/publicIPAddresses', concat('worker-linux-', padLeft(copyIndex(1), 2, '0')))]",
        "[resourceId('Microsoft.Network/loadBalancers', 'apps')]"
      ]
    },
    {
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[concat('worker-win-', padLeft(copyIndex(1), 2, '0'))]",
      "apiVersion": "[variables('api').networkInterfaces]",
      "location": "[resourceGroup().location]",
      "tags": {
        "displayName": "NIC - Workers Windows"
      },
      "copy": {
        "name": "NICCopy",
        "count": "[variables('workers-windows').instances]"
      },
      "properties": {
        "ipConfigurations": [{
          "name": "ipconfig",
          "primary": true,
          "properties": {
            "publicIPAddress": {
              "id": "[resourceId('Microsoft.Network/publicIPAddresses', concat('worker-win-', padLeft(copyIndex(1), 2, '0')))]"
            },
            "subnet": {
              "id": "[variables('workers-windows').subnet.nodes]"
            }
          }
        }]
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks', 'vnet')]",
        "[resourceId('Microsoft.Network/publicIPAddresses', concat('worker-win-', padLeft(copyIndex(1), 2, '0')))]"
      ]
    },
    {
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[concat('worker-win-', padLeft(copyIndex(1), 2, '0'), '-pods')]",
      "apiVersion": "[variables('api').networkInterfaces]",
      "location": "[resourceGroup().location]",
      "tags": {
        "displayName": "NIC - Windows Workers"
      },
      "copy": {
        "name": "NICCopy",
        "count": "[variables('workers-windows').instances]"
      },
      "properties": {
        "copy": [{
          "name": "ipConfigurations",
          "count": 128,
          "input": {
            "name": "[concat('ipconfig', copyIndex('ipConfigurations'))]",
            "properties": {
              "primary": "[equals(copyIndex('ipConfigurations'), 0)]",
              "subnet": {
                "id": "[variables('workers-windows').subnet.pods]"
              }
            }
          }
        }]
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks', 'vnet')]",
        "[resourceId('Microsoft.Network/publicIPAddresses', concat('worker-win-', padLeft(copyIndex(1), 2, '0')))]"
      ]
    },
    {
      "type": "Microsoft.Compute/virtualMachines",
      "copy": {
        "name": "VMCopy",
        "count": "[variables('managers').instances]"
      },
      "name": "[concat('manager-', padLeft(copyIndex(1), 2, '0'))]",
      "apiVersion": "[variables('api').virtualMachines]",
      "location": "[resourceGroup().location]",
      "tags": {
        "displayName": "VM - Managers"
      },
      "properties": {
        "hardwareProfile": {
          "vmSize": "[variables('managers').vmSize]"
        },
        "storageProfile": {
          "imageReference": "[variables('managers').imageReference]",
          "osDisk": {
            "name": "osdisk",
            "diskSizeGB": 128,
            "vhd": {
              "uri": "[concat(reference(concat('Microsoft.Storage/storageAccounts/', variables('shared').storage.name), providers('Microsoft.Storage', 'storageAccounts').apiVersions[0]).primaryEndpoints.blob, 'vhd', '/', concat('manager-', padLeft(copyIndex(1), 2, '0')), '-osdisk.vhd')]"
            },
            "caching": "ReadWrite",
            "createOption": "FromImage"
          }
        },
        "osProfile": {
          "computerName": "[concat('manager', padLeft(copyIndex(1), 2, '0'))]",
          "adminUsername": "[parameters('credentials').adminUsername]",
          "adminPassword": "[parameters('credentials').adminPassword]"
        },
        "networkProfile": {
          "networkInterfaces": [{
              "id": "[resourceId('Microsoft.Network/networkInterfaces', concat('manager-', padLeft(copyIndex(1), 2, '0')))]",
              "properties": {
                "primary": true
              }
            },
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', concat('manager-', padLeft(copyIndex(1), 2, '0'), '-pods'))]",
              "properties": {
                "primary": false
              }
            }
          ]
        },
        "availabilitySet": {
          "id": "[resourceId('Microsoft.Compute/availabilitySets', 'managers')]"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Compute/availabilitySets', variables('managers').avSet)]",
        "[resourceId('Microsoft.Network/networkInterfaces', concat('manager-', padLeft(copyIndex(1), 2, '0')))]"
      ],
      "resources": [{
        "name": "InstallDockerEE",
        "type": "extensions",
        "location": "[resourceGroup().location]",
        "apiVersion": "[variables('api').virtualMachines]",
        "dependsOn": [
          "[if(equals(copyIndex(), 0), resourceId('Microsoft.Compute/virtualMachines', concat('manager-', padLeft(copyIndex(1), 2, '0'))), resourceId('Microsoft.Compute/virtualMachines/extensions', 'manager-01', 'InstallDockerEE'))]",
          "[resourceId('Microsoft.Compute/virtualMachines', concat('manager-', padLeft(copyIndex(1), 2, '0')))]",
          "[resourceId('Microsoft.Network/publicIPAddresses', 'ucp')]"
        ],
        "tags": {
          "displayName": "InstallDocker"
        },
        "properties": {
          "publisher": "Microsoft.Azure.Extensions",
          "type": "CustomScript",
          "typeHandlerVersion": "2.0",
          "autoUpgradeMinorVersion": true,
          "settings": {
            "fileUris": [
              "[parameters('scripts').installDockerEE]",
              "[parameters('scripts').installUCP]"
            ],
            "commandToExecute": "[concat('sh install-docker-ee.sh', ' ', parameters('dockerEEURL'), ' ', parameters('versions').engine.linux, ' && sh install-ucp.sh ', reference(resourceId('Microsoft.Network/publicIPAddresses', 'ucp')).dnsSettings.fqdn, ' ', reference(resourceId('Microsoft.Network/publicIPAddresses', 'apps')).dnsSettings.fqdn, ' Manager ', parameters('versions').ucp, ' ', variables('shared').networking.subnets[1].properties.addressPrefix)]"
          }
        }
      }]
    },
    {
      "type": "Microsoft.Compute/virtualMachines",
      "copy": {
        "name": "VMCopy",
        "count": "[variables('dtr').instances]"
      },
      "name": "[concat('dtr-', padLeft(copyIndex(1), 2, '0'))]",
      "apiVersion": "[variables('api').virtualMachines]",
      "location": "[resourceGroup().location]",
      "tags": {
        "displayName": "VM - DTRs"
      },
      "properties": {
        "hardwareProfile": {
          "vmSize": "[variables('dtr').vmSize]"
        },
        "storageProfile": {
          "imageReference": "[variables('dtr').imageReference]",
          "osDisk": {
            "name": "osdisk",
            "diskSizeGB": 128,
            "vhd": {
              "uri": "[concat(reference(concat('Microsoft.Storage/storageAccounts/', variables('shared').storage.name), providers('Microsoft.Storage', 'storageAccounts').apiVersions[0]).primaryEndpoints.blob, 'vhd', '/', concat('dtr-', padLeft(copyIndex(1), 2, '0')), '-osdisk.vhd')]"
            },
            "caching": "ReadWrite",
            "createOption": "FromImage"
          }
        },
        "osProfile": {
          "computerName": "[concat('dtr', padLeft(copyIndex(1), 2, '0'))]",
          "adminUsername": "[parameters('credentials').adminUsername]",
          "adminPassword": "[parameters('credentials').adminPassword]"
        },
        "networkProfile": {
          "networkInterfaces": [{
              "id": "[resourceId('Microsoft.Network/networkInterfaces', concat('dtr-', padLeft(copyIndex(1), 2, '0')))]",
              "properties": {
                "primary": true
              }
            },
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', concat('dtr-', padLeft(copyIndex(1), 2, '0'), '-pods'))]",
              "properties": {
                "primary": false
              }
            }
          ]
        },
        "availabilitySet": {
          "id": "[resourceId('Microsoft.Compute/availabilitySets', 'dtr')]"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Compute/availabilitySets', variables('dtr').avSet)]",
        "[resourceId('Microsoft.Network/networkInterfaces', concat('dtr-', padLeft(copyIndex(1), 2, '0')))]"
      ],
      "resources": [{
        "name": "InstallDockerEE",
        "condition": true,
        "type": "extensions",
        "location": "[resourceGroup().location]",
        "apiVersion": "[variables('api').virtualMachines]",
        "dependsOn": [
          "[resourceId('Microsoft.Compute/virtualMachines/extensions', if(greaterOrEquals(copyIndex(), 1), concat('dtr-', padLeft(copyIndex(), 2, '0')), 'manager-01'), 'InstallDockerEE')]",
          "[resourceId('Microsoft.Compute/virtualMachines', concat('dtr-', padLeft(copyIndex(1), 2, '0')))]",
          "[resourceId('Microsoft.Network/publicIPAddresses', 'dtr')]"
        ],
        "tags": {
          "displayName": "InstallDocker"
        },
        "properties": {
          "publisher": "Microsoft.Azure.Extensions",
          "type": "CustomScript",
          "typeHandlerVersion": "2.0",
          "autoUpgradeMinorVersion": true,
          "settings": {
            "fileUris": [
              "[parameters('scripts').installDockerEE]",
              "[parameters('scripts').installUCP]",
              "[parameters('scripts').installDTR]"
            ],
            "commandToExecute": "[concat('sh install-docker-ee.sh ', parameters('dockerEEURL'), ' ', parameters('versions').engine.linux, ' && sh install-ucp.sh ', reference(resourceId('Microsoft.Network/publicIPAddresses', 'ucp')).dnsSettings.fqdn, ' ', reference(resourceId('Microsoft.Network/publicIPAddresses', 'apps')).dnsSettings.fqdn, ' Worker ', parameters('versions').ucp, ' ', variables('shared').networking.subnets[1].properties.addressPrefix, ' && sh install-dtr.sh ', reference(resourceId('Microsoft.Network/publicIPAddresses', 'ucp')).dnsSettings.fqdn, ' ', reference(resourceId('Microsoft.Network/publicIPAddresses', 'dtr')).dnsSettings.fqdn, ' ', parameters('versions').dtr, ' ', variables('shared').storage.name, ' ', listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('shared').storage.name), '2016-12-01').keys[0].value)]"
          }
        }
      }]
    },
    {
      "type": "Microsoft.Compute/virtualMachines",
      "copy": {
        "name": "VMCopy",
        "count": "[variables('workers-linux').instances]"
      },
      "name": "[concat('worker-linux-', padLeft(copyIndex(1), 2, '0'))]",
      "apiVersion": "[variables('api').virtualMachines]",
      "location": "[resourceGroup().location]",
      "tags": {
        "displayName": "VM - Linux Workers"
      },
      "properties": {
        "hardwareProfile": {
          "vmSize": "[variables('workers-linux').vmSize]"
        },
        "storageProfile": {
          "imageReference": "[variables('workers-linux').imageReference]",
          "osDisk": {
            "name": "osdisk",
            "diskSizeGB": 128,
            "vhd": {
              "uri": "[concat(reference(concat('Microsoft.Storage/storageAccounts/', variables('shared').storage.name), providers('Microsoft.Storage', 'storageAccounts').apiVersions[0]).primaryEndpoints.blob, 'vhd', '/', concat('worker-linux-', padLeft(copyIndex(1), 2, '0')), '-osdisk.vhd')]"
            },
            "caching": "ReadWrite",
            "createOption": "FromImage"
          }
        },
        "osProfile": {
          "computerName": "[concat('worker-linux-', padLeft(copyIndex(1), 2, '0'))]",
          "adminUsername": "[parameters('credentials').adminUsername]",
          "adminPassword": "[parameters('credentials').adminPassword]"
        },
        "networkProfile": {
          "networkInterfaces": [{
              "id": "[resourceId('Microsoft.Network/networkInterfaces', concat('worker-linux-', padLeft(copyIndex(1), 2, '0')))]",
              "properties": {
                "primary": true
              }
            },
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', concat('worker-linux-', padLeft(copyIndex(1), 2, '0'), '-pods'))]",
              "properties": {
                "primary": false
              }
            }
          ]
        },
        "availabilitySet": {
          "id": "[resourceId('Microsoft.Compute/availabilitySets', 'workers-linux')]"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Compute/availabilitySets', variables('workers-linux').avSet)]",
        "[resourceId('Microsoft.Network/networkInterfaces', concat('worker-linux-', padLeft(copyIndex(1), 2, '0')))]"
      ],
      "resources": [{
        "name": "InstallDockerEE",
        "type": "extensions",
        "location": "[resourceGroup().location]",
        "apiVersion": "[variables('api').virtualMachines]",
        "dependsOn": [
          "[resourceId('Microsoft.Compute/virtualMachines/extensions', 'manager-01', 'InstallDockerEE')]",
          "[resourceId('Microsoft.Compute/virtualMachines', concat('worker-linux-', padLeft(copyIndex(1), 2, '0')))]",
          "[resourceId('Microsoft.Network/publicIPAddresses', 'apps')]"
        ],
        "tags": {
          "displayName": "InstallDocker"
        },
        "properties": {
          "publisher": "Microsoft.Azure.Extensions",
          "type": "CustomScript",
          "typeHandlerVersion": "2.0",
          "autoUpgradeMinorVersion": true,
          "settings": {
            "fileUris": [
              "[parameters('scripts').installDockerEE]",
              "[parameters('scripts').installUCP]"
            ],
            "commandToExecute": "[concat('sh install-docker-ee.sh', ' ', parameters('dockerEEURL'), ' ', parameters('versions').engine.linux, ' && sh install-ucp.sh ', reference(resourceId('Microsoft.Network/publicIPAddresses', 'ucp')).dnsSettings.fqdn, ' ', reference(resourceId('Microsoft.Network/publicIPAddresses', 'apps')).dnsSettings.fqdn, ' Worker ', parameters('versions').ucp, ' ', variables('shared').networking.subnets[1].properties.addressPrefix)]"
          }
        }
      }]
    },
    {
      "type": "Microsoft.Compute/virtualMachines",
      "copy": {
        "name": "VMCopy",
        "count": "[variables('workers-windows').instances]"
      },
      "name": "[concat('worker-win-', padLeft(copyIndex(1), 2, '0'))]",
      "apiVersion": "[variables('api').virtualMachines]",
      "location": "[resourceGroup().location]",
      "tags": {
        "displayName": "VM - Windows Workers"
      },
      "properties": {
        "hardwareProfile": {
          "vmSize": "[variables('workers-windows').vmSize]"
        },
        "storageProfile": {
          "imageReference": "[variables('workers-windows').imageReference]",
          "osDisk": {
            "name": "osdisk",
            "diskSizeGB": 128,
            "vhd": {
              "uri": "[concat(reference(concat('Microsoft.Storage/storageAccounts/', variables('shared').storage.name), providers('Microsoft.Storage', 'storageAccounts').apiVersions[0]).primaryEndpoints.blob, 'vhd', '/', concat('worker-win-', padLeft(copyIndex(1), 2, '0')), '-osdisk.vhd')]"
            },
            "caching": "ReadWrite",
            "createOption": "FromImage"
          }
        },
        "osProfile": {
          "computerName": "[concat('worker-win-', padLeft(copyIndex(1), 2, '0'))]",
          "adminUsername": "[parameters('credentials').adminUsername]",
          "adminPassword": "[parameters('credentials').adminPassword]"
        },
        "networkProfile": {
          "networkInterfaces": [{
            "id": "[resourceId('Microsoft.Network/networkInterfaces', concat('worker-win-', padLeft(copyIndex(1), 2, '0')))]",
            "properties": {
              "primary": true
            }
          }, {
            "id": "[resourceId('Microsoft.Network/networkInterfaces', concat('worker-win-', padLeft(copyIndex(1), 2, '0'), '-pods'))]",
            "properties": {
              "primary": false
            }
          }]
        },
        "availabilitySet": {
          "id": "[resourceId('Microsoft.Compute/availabilitySets', 'workers-windows')]"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Compute/availabilitySets', variables('workers-windows').avSet)]",
        "[resourceId('Microsoft.Network/networkInterfaces', concat('worker-win-', padLeft(copyIndex(1), 2, '0')))]"
      ],
      "resources": [{
        "name": "InstallDockerEE",
        "type": "extensions",
        "location": "[resourceGroup().location]",
        "apiVersion": "[variables('api').virtualMachines]",
        "dependsOn": [
          "[resourceId('Microsoft.Compute/virtualMachines/extensions', 'manager-01', 'InstallDockerEE')]",
          "[resourceId('Microsoft.Compute/virtualMachines', concat('worker-win-', padLeft(copyIndex(1), 2, '0')))]"
        ],
        "tags": {
          "displayName": "InstallDocker"
        },
        "properties": {
          "publisher": "Microsoft.Compute",
          "type": "CustomScriptExtension",
          "typeHandlerVersion": "1.9",
          "autoUpgradeMinorVersion": true,
          "settings": {
            "fileUris": [
              "[parameters('scripts').installUCPPowershell]"
            ],
            "commandToExecute": "[concat('powershell -ExecutionPolicy Unrestricted -File install-ucp.ps1 -Username \"', parameters('credentials').adminUsername, '\" -Password \"', parameters('credentials').adminPassword, '\" -UCP_FQDN \"', reference(resourceId('Microsoft.Network/publicIPAddresses', 'ucp')).dnsSettings.fqdn, '\" -Engine_Version \"', parameters('versions').engine.windows, '\" -Mode \"', if(equals(copyIndex(1), variables('workers-windows').instances), 'Partial', 'Full'), '\"')]"
          }
        }
      }]
    }
  ],
  "outputs": {
    "ucp_FQDN": {
      "type": "string",
      "value": "[concat('https://', reference(resourceId('Microsoft.Network/publicIPAddresses', 'ucp')).dnsSettings.fqdn)]"
    },
    "dtr_FQDN": {
      "type": "string",
      "value": "[concat('https://', reference(resourceId('Microsoft.Network/publicIPAddresses', 'dtr')).dnsSettings.fqdn)]"
    },
    "dtr_Storage_Account": {
      "type": "string",
      "value": "[variables('shared').storage.name]"
    },
    "dtr_Storage_Key": {
      "type": "string",
      "value": "[listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('shared').storage.name), '2016-12-01').keys[0].value]"
    }
  }
}